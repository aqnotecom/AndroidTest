apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply from: '../../config/config.gradle'

android {

    defaultConfig {
        applicationId "com.aqnote.app.wifianalyzer"
    }

    buildTypes {                                    // build类型
        release {                                   // 发布
            signingConfig signingConfigs.release    // 设置签名信息
            minifyEnabled true                      // 混淆开启
            shrinkResources true                    //移除无用的resource 文件
            zipAlignEnabled true                    //对齐
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'  // 指定混淆规则文件

        }
        debug {                                      // 调试
            signingConfig signingConfigs.debug       // 设置签名信息
            minifyEnabled false                      // 混淆开启
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'  // 指定混淆规则文件
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses true
            }
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:25.+'
    implementation 'com.android.support:design:25.+'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'com.jjoe64:graphview:4.1.1'

    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
    testImplementation 'com.googlecode.junit-toolbox:junit-toolbox:2.2'
    testImplementation 'org.robolectric:robolectric:3.1.4'
    testImplementation 'org.robolectric:shadows-support-v4:3.1.4'
}

//acoco {
//    toolVersion "0.7.7.201606060606"
//}
//
//jacocoAndroidUnitTestReport {
//    excludes += ['**/com/jjoe64/*']
//    html.enabled true
//    xml.enabled true
//    csv.enabled false
//}
//
//if (project.hasProperty('keyAlias')) {
//    def propertiesFile = file('../../keystores/androidkeystore.properties')
//    def Properties properties = readProperties(propertiesFile);
//
//    System.out.println(">>> Signing Config " + properties)
//    android.buildTypes.release.signingConfig.keyAlias = properties['key_alias'].toString()
//    android.buildTypes.release.signingConfig.keyPassword = properties['key_password'].toString()
//    android.buildTypes.release.signingConfig.storeFile = file(properties['store_filename'].toString())
//    android.buildTypes.release.signingConfig.storePassword = properties['store_password'].toString()
//}
//

